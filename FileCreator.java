import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;

public class FileCreator {
    public static void main(String[] args) throws IOException {
        String[] files = text.split("\n");
        Files.createFile(new File("README3.md").toPath());
        FileWriter fileWriter = new FileWriter(new File("README3.md"));
        BufferedWriter bufferedWriter = new BufferedWriter(fileWriter);
        for (String file: files) {
            String path = file;
            if (file.length() >= 1 && Character.isDigit(file.substring(0,1).charAt(0))) {
                path = path.replace(" ", "_");
                if (file.endsWith("?")) {
                    path = path.substring(0, file.lastIndexOf("?"));
                    path = path.replaceAll("\\?", "");
                    path = path.replaceAll(",", "");
                    path = path.replaceAll("\\\\", "");
                    path = path.replaceAll("/", "|");
                    path = path.replaceAll("\\.", "");
                    path = path + ".md";
                    bufferedWriter.write(String.format("[%s](/%s)   ", file, path));
                    bufferedWriter.newLine();
                    bufferedWriter.flush();
                } else {
                    if (file.endsWith(".")) {
                        path = path.replaceAll("\\?", "");
                        path = path.replaceAll(",", "");
                        path = path.replaceAll("\\\\", "");
                        path = path.replaceAll("/", "|");
                        path = path.replaceAll("\\.", "");
                        path = path + ".md";
                        File test = new File(path);
                        if (Files.notExists(test.toPath())) {
                            Files.createFile(test.toPath());
                        }
                        bufferedWriter.write(String.format("[%s](/%s)   ", file, path));
                        bufferedWriter.newLine();
                        bufferedWriter.flush();
                    }
                }
            }
        }
        bufferedWriter.flush();
        bufferedWriter.close();
    }

    private static String text = "6. Зачем используют JVM?\n" +
            "7. Что такое bytecode?\n" +
            "8. Какие признаки JavaBean?\n" +
            "9. Что такое OutOfMemoryError?\n" +
            "10. Что такое стектрейс? Как его получить?\n" +
            "11. Назовите все методы класса object.\n" +
            "12. В чем отличие между try-with-resources и try-catch-finally при работе с ресурсами?\n" +
            "13. Что такое конструкторы? Какие типы знаете?\n" +
            "14. Что такое побитовые операции?\n" +
            "15. Объекты каких стандартных классов immutable в Java?\n" +
            "16. Дайте краткую характеристику immutable object. Зачем они нужны?\n" +
            "17. Как создать immutable object?\n" +
            "18. Какие преимущества immutable object перед обычными объектами?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Java Стартовый (урок 1, урок 2, урок 5), Java Базовый (урок 1, урок 2, урок 8, урок 9).\n" +
            " \n" +
            "ООП\n" +
            "19. Что такое ООП? Назовите принципы с примерами.\n" +
            "20. В чем преимущества ООП перед процедурным программированием?\n" +
            "21. В чем заключается главная особенность ООП?\n" +
            "22. Расскажите, какие преимущества мы получаем при использовании ООП?\n" +
            "23. Расскажите, какие есть недостатки в ООП?\n" +
            "24. Расскажите о принципе наследования в ООП? Зачем он нужен?\n" +
            "25. Дайте определение принципа полиморфизма в ООП? Как работает полиморфизм?\n" +
            "26. Что такое статический и динамический полиморфизм?\n" +
            "27. Дайте определение принципа абстракции в ООП.\n" +
            "28. Какие элементы языка отвечают за инкапсуляцию?\n" +
            "29. Какие элементы языка отвечают за наследование?\n" +
            "30. Какие элементы языка отвечают за полиморфизм?\n" +
            "31. Что такое SOLID? Приведите примеры.\n" +
            "32. Что такое перегрузки (overloading) метода?\n" +
            "33. Что такое переопределение (override) метода?\n" +
            "34. Что такое класс, объект, интерфейс?\n" +
            "35. Что такое класс POJO? Приведите пример такого класса.\n" +
            "36. Какие элементы могут содержать класс?\n" +
            "37. Дайте определение объекта.\n" +
            "38. Расскажите о наследовании в Java. Какие особенности использования ключевого слова super?\n" +
            "39. Что такое сигнатура метода? Приведите примеры правильных и неправильных сигнатур.\n" +
            "40. Можно ли в конструкторе применять return?\n" +
            "41. Можно ли в конструкторе выкинуть исключение (exception)?\n" +
            "42. Из каких элементов состоит заголовок класса? Напишите пример.\n" +
            "43. Из каких элементов состоит заголовок метода? Напишите пример.\n" +
            "44. Создайте в объекте-наследнике конструктор по умолчанию, если в базовом классе он не определен (но определен другой конструктор).\n" +
            "45. Когда применяется ключевое слово this?\n" +
            "46. Что такое инициализатор?\n" +
            "47. Для наследования класса public class Child extends Parent напишите порядок инициализации объекта.\n" +
            "48. Какие знаете отношения между классами (объектами)?\n" +
            "49. Какие ассоциативные связи между объектами вы знаете?\n" +
            "50. Что такое модификаторы доступа в Java? Назовите их. Для чего используются?\n" +
            "51. Назовите основную особенность статических переменных и методов.\n" +
            "52. Какие основные ограничения действуют на статические переменные и методы?\n" +
            "53. Что означает ключевое слово static? Может ли статический метод быть переопределенным или перегруженным?\n" +
            "54. Может ли метод быть статическим и абстрактным одновременно?\n" +
            "55. Можно ли использовать статические методы внутри обычных? Наоборот? Почему?\n" +
            "56. Что означает ключевое слово final?\n" +
            "57. Что такое abstract? Абстрактный класс? Абстрактный метод?\n" +
            "58. Что такое interface? Может ли быть final interface?\n" +
            "59. В чем разница между абстрактным классом и интерфейсом в Java?\n" +
            "60. Где можно инициализировать статические поля?\n" +
            "61. Что такое анонимные классы?\n" +
            "62. Что такое примитивные классы?\n" +
            "63. Что такое класс «обертка» (wrapper)?\n" +
            "64. Что такое Nested class? Когда используется?\n" +
            "65. Какие модификаторы доступа могут быть у класса?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсах Java Базовый (урок 1-4, урок 6, урок 7, урок 9), SOLID принципы в Java.\n" +
            " \n" +
            "Библиотеки и стандарты\n" +
            "67. Что такое Hibernate? В чем разница между JPA i Hibernate?\n" +
            "68. Что такое каскадность? Как она используется в Hibernate?\n" +
            "69. Может ли entity-класс быть абстрактным классом?\n" +
            "70. Что такое entity manager? За что отвечает?\n" +
            "71. Что такое класс Assert? Зачем и как его использовать?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсе JDBC & Hibernate. \n" +
            " \n" +
            "String\n" +
            "72. Дайте характеристику String в Java.\n" +
            "73. Какие есть способы создания объекта String? Где он создается?\n" +
            "Тема связана со специальностями:\n" +
            "\n" +
            "74. Как сравнить две строки в Java и/или отсортировать их?\n" +
            "75. Предложите алгоритм преобразования строки в знак. Напишите соответствующий код.\n" +
            "76. Как превратить строку в массив байтов и обратно? Напишите соответствующий код.\n" +
            "77. Что такое строковый пул и зачем он нужен?\n" +
            "78. Какие GOF-шаблоны применяются в строковом пуле?\n" +
            "79. Как разделить строку на части? Напишите соответствующий код.\n" +
            "80. Почему массив символов лучше, чем строка для хранения пароля?\n" +
            "81. Какая разница между String, StringBuffer и StringBuilder?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Java Углублённый (урок 5).\n" +
            " \n" +
            "Enum\n" +
            "82. Дайте краткую характеристику Enum в Java.\n" +
            "83. Может ли Enum реализовывать (implement) интерфейс?\n" +
            "84. Может ли Enum расширить (extends) класс?\n" +
            "85. Можно ли создать Enum без экземпляров объектов?\n" +
            "86. Можем ли мы переопределить метод toString() для Enum?\n" +
            "87. Что будет, если не будем переопределять метод toString() для Enum?\n" +
            "88. Можем ли мы указать конструктор внутри Enum?\n" +
            "89. В чем разница между == и equals()?\n" +
            "90. Что делает метод ordinal() в Enum?\n" +
            "91. Можно ли использовать Enum с TreeSet или TreeMap в Java?\n" +
            "92. Как связаны методы ordinal() и compareTo() в Enum?\n" +
            "93. Напишите пример Enum.\n" +
            "94. Можно ли использовать Enum в switch case?\n" +
            "95. Как получить все имеющиеся значения в экземпляре Enum?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсах Java Базовый (урок 7), Java Углублённый (Урок 3).\n" +
            " \n" +
            "Stream API\n" +
            "96. Что такое Stream в Java?\n" +
            "97. Назовите основные свойства транзакций.\n" +
            "98. Какие есть уровни изоляции транзакций?\n" +
            "99. Какая разница между Statement и PreparedStatement?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Java Углублённый (урок 15).\n" +
            " \n" +
            "Collections\n" +
            "100. Расскажите об итераторах и об их применении.\n" +
            "101. Какая иерархия коллекций в Java Collection Framework?\n" +
            "102. Какое внутреннее строение ArrayList?\n" +
            "103. Какое внутреннее строение LinkedList?\n" +
            "104. Какое внутреннее строение HashMap?\n" +
            "105. Чем отличается ArrayList от LinkedList?\n" +
            "106. Чем отличается ArrayList от HashSet?\n" +
            "107. Зачем в Java такое многообразие имплементации динамического массива?\n" +
            "108. Зачем в Java такое многообразие имплементации key-value storage?\n" +
            "109. Как отсортировать коллекцию элементов?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Java Базовый (урок 5), Java Углублённый (урок 3, урок 15).\n" +
            " \n" +
            "Class Object. Equals and HashCode\n" +
            "110. Дайте краткую характеристику class object в Java.\n" +
            "111. Для чего используют Equals and HashCode в Java?\n" +
            "112. Расскажите о контракте между Equals and HashCode в Java?\n" +
            "113. Какие условия выдвигаются касательно переопределения соглашения при переопределении Equals?\n" +
            "114. Что будет, если не переопределить Equals and HashCode?\n" +
            "115. Какие значения мы получим, если у нас не перераспределены Equals and HashCode?\n" +
            "116. Почему симметричность выполняется, только если x.equals(y) возвращает true?\n" +
            "117. Что такое коллизия в HashCode? Как с ней бороться?\n" +
            "118. Что будет, если элемент, участвующий в контракте с HashCode, меняет свое значение?\n" +
            "119. Напишите методы Equals and HashCode для класса Student, который состоит из полей String name и int age.\n" +
            "120. В чем разница применения if (obj instanceof Student) и if (getClass() == obj.getClass())?\n" +
            "121. Дайте краткую характеристику метода clone().\n" +
            "122. В чем заключается особенность работы метода clone() с полями объекта типа-ссылки?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Java Базовый (урок 9).\n" +
            " \n" +
            "Exceptions\n" +
            "123. Дайте определение понятию exception (исключительная ситуация).\n" +
            "124. Какие знаете особенности использования оператора try ... catch?\n" +
            "125. В чем разница между error и exception?\n" +
            "126. Какая разница между checked и unchecked, exception, throw, throws.\n" +
            "127. Какой есть иерархия исключений?\n" +
            "128. Что такое checked и unchecked exception?\n" +
            "129. Нужно ли проверять checked exception?\n" +
            "130. О чем говорит и как использовать ключевое слово throws?\n" +
            "131. Какие возможные способы обработки исключений вы знаете?\n" +
            "132. Напишите пример перехвата и обработки исключения в блоке try-catch метода.\n" +
            "133. Напишите пример перехвата и обработки исключения в секции throws-метода и передачи вызывающему методу.\n" +
            "134. Напишите пример перехвата и обработки исключения с использованием собственных исключений.\n" +
            "135. Какие есть правила для проверки исключений при наследовании?\n" +
            "136. Могли бы ли вы написать код, если блок finally не будет выполнен?\n" +
            "137. Напишите пример обработки нескольких исключений в одном блоке catch.\n" +
            "138. Какой оператор позволяет принудительно выбросить исключение? Напишите пример.\n" +
            "139. Может ли метод main выбросить throws-исключение? Если да - куда передаст?\n" +
            "140. Напишите пример try with resources.\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Java Базовый (урок 8).\n" +
            " \n" +
            "Многопоточность\n" +
            "141. Какие средства для работы с многопоточностью знаете?\n" +
            "142. Что такое процесс и поток? Чем отличается процесс от потока?\n" +
            "143. Расскажите о синхронизации между потоками. Для чего используют методы wait(), notify() - notifyAll(), join()?\n" +
            "144. Как остановить поток?\n" +
            "145. Как между потоками обмениваться данными?\n" +
            "146. В чем заключается отличие класса Thread от интерфейса Runnable?\n" +
            "147. Есть потоки Т1, Т2 и Т3. Как реализовать их последовательное выполнение?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Java Углублённый (урок 13, урок 14).\n" +
            " \n" +
            "Практические задания\n" +
            "148. Matrix Diagonal Sum (задача с Leetcode).\n" +
            "149. Move Zeroes (задача с Leetcode).\n" +
            "150. Дан List <String> names. Удалите первую букву из каждого имени и верните отсортированный список.\n" +
            "151. Перевернуть массив.\n" +
            "152. Проверить, является ли строка палиндромом.\n" +
            "153. Написать простой алгоритм сортировки (Bubble, Selection или Shuttle). Как его можно улучшить?\n" +
            "154. Напишите алгоритм (последовательность действий) составления литерала типа int и литералов типа byte. Объясните, что происходит с памятью.\n" +
            " \n" +
            "Middle\n" +
            "Общие\n" +
            "1. В чем преимущества и недостатки ООП, если сравнивать с процедурным/функциональным программированием?\n" +
            "2. Чем отличается агрегация от композиции?\n" +
            "3. Какие паттерны GoF вы использовали на практике? Приведите примеры.\n" +
            "Видео курсы по схожей тематике:\n" +
            "4. Что такое прокси-объект? Приведите примеры.\n" +
            "5. Какие нововведения анонсировано в Java 8?\n" +
            "6. Что такое High Cohesion и Low Coupling? Приведите примеры.\n" +
            "Лучше всего тема шаблонов в Java раскрыта в видео курсе Паттерны проектирования в Java.\n" +
            " \n" +
            "ООП\n" +
            "7. Каким образом можно реализовать множественное наследование в Java?\n" +
            "8. Какая разница между методами final, finally и finalize()?\n" +
            " \n" +
            "Java Core\n" +
            "9. В чем разница между статическим и динамическим связыванием в Java?\n" +
            "10. Можно ли использовать private или protected переменные в interface?\n" +
            "11. Что такое Classloader и для чего используется?\n" +
            "12. Что такое Run-Time Data Areas?\n" +
            "13. Что такое immutable object?\n" +
            "14. В чем особенность класса String?\n" +
            "15. Что такое ковариантность типов?\n" +
            "16. Какие есть методы в классе Object?\n" +
            "17. Приведите примеры удачного и неудачного использования Optional.\n" +
            "18. Можно ли объявлять main method как final?\n" +
            "19. Можно ли импортировать те же самые package/class дважды? Какие последствия?\n" +
            "20. Что такое Casting? Когда можем получить исключение ClassCastException?\n" +
            "21. Почему современные фреймворки используют в основном только unchecked exceptions?\n" +
            "22. Что такое static import?\n" +
            "23. Какая связь между методами hashCode() и equals()?\n" +
            "24. Когда используют BufferedInputStream и BufferedOutputStream классы?\n" +
            "25. Какая разница между классами java.util.Collection и java.util.Collections?\n" +
            "26. Какая разница между Enumeration и Iterator?\n" +
            "27. В чем разница между итераторами fail-fast и fail-safe?\n" +
            "28. Зачем нужен модификатор transient?\n" +
            "29. Как влияют на сериализацию модификаторы static и final?\n" +
            "30. Какие особенности использования интерфейса Cloneable?\n" +
            "31. Какие особенности использования интерфейса AutoCloseable?\n" +
            "32. Что такое FunctionInterface и чем он отличается от обычного интерфейса?\n" +
            "33. Что такое Atomic types и зачем они нужны?\n" +
            "34. Что такое Happens-before? Какие особенности использования ключевого слова volatile?\n" +
            "35. Расскажите о Heap и Stack память в Java. В чем разница между ними? Где хранятся примитивы?\n" +
            "36. Чем отличается stack от heap памяти? Когда и какая область памяти резервируется? Зачем такое разделение нужно?\n" +
            "37. Какие принципы работы и области памяти Garbage Collector?\n" +
            "38. Как работает Garbage Collector? Расскажите о Reference counting и Tracing.\n" +
            "39. Расскажите о механизме работы autoboxing в Java.\n" +
            "40. Как реализована сериализация в Java? Где мы можем ее увидеть?\n" +
            "41. Расскажите, в чем разница между WeakReference и SoftReference?\n" +
            "42. Что такое generics? Для чего они нужны? Какую проблему решают?\n" +
            "43. Что такое PECS и как используется? Приведите примеры.\n" +
            "44. Зачем на практике могут понадобиться immutable объекты?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Java Базовый и Java Углублённый.\n" +
            " \n" +
            "Библиотеки и инструменты\n" +
            "45. Чем полезны инструменты Maven, Ant, Gradle?\n" +
            "46. Что такое Unit Tests? Чем класс JUnit.Assert отличается от ключевого слова assert?\n" +
            "47. Что такое и зачем нужен Spring core? Раскройте понятие Inversion of Control и Dependency Injection.\n" +
            "48. Как «под капотом» работает @Transactional?\n" +
            "49. Как «под капотом» работает Spring?\n" +
            "50. Что такое и зачем нужен Hibernate? Раскройте понятие ORM.\n" +
            "51. Что такое и когда возникает LazyLoadingException?\n" +
            "52. Как «под капотом» работает Hibernate? Как бы вы написали собственный Hibernate?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсах JDBC & Hibernate, Unit тестирование в Java с JUnit, Spring, Spring MVC.\n" +
            " \n" +
            "Многопоточность\n" +
            "53. Какие преимущества и недостатки использования многопоточности?\n" +
            "54. Расскажите о четырех способах работы со многими потоками и чем отличается wait ... notify ... notifyAll от synchronized? От Future?\n" +
            "55. Что такое и зачем нужен ThreadLocal?\n" +
            "56. В чем разница между Thread.sleep() и Thread.yield()?\n" +
            "57. Как работает Thread.join()?\n" +
            "58. Что такое deadlock?\n" +
            "59. Что такое race condition?\n" +
            "60. Для чего использовать volatile, synchronized, transient, native?\n" +
            "61. Расскажите о приоритетах потоков.\n" +
            "62. Что такое потоки-демоны и для чего их устанавливать?\n" +
            "63. Почему нежелательно использовать Thread.stop()?\n" +
            "64. Как реализовать пул потоков?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Java Углублённый (урок 13, урок 14).\n" +
            " \n" +
            "Collections\n" +
            "65. Чем отличается List от Set?\n" +
            "66. В чем разница между HashSet, LinkedHashSet и TreeSet?\n" +
            "67. Какая внутренняя структура HashMap?\n" +
            "68. Какое время поиска элемента в ArrayList, HashSet?\n" +
            "69. Как реализовать свой Stack?\n" +
            "70. Как работает метод put в HashMap? Почему нам нужно высчитывать позицию бакета? В чем преимущества такой операции?\n" +
            "71. В чем разница между HashMap и TreeMap? Когда и где их нужно использовать?\n" +
            "72. Какое внутреннее строение TreeMap? Рассказать об RBT.\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Java Углублённый (урок 1, урок 2, урок 3).\n" +
            " \n" +
            "Stream API\n" +
            "73. Какие есть методы в интерфейсе Stream?\n" +
            "74. Чем отличается метод map от flatMap?\n" +
            "75. Какой функциональный интерфейс использует метод filter?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Java Углублённый (урок 15).\n" +
            " \n" +
            "Базы данных\n" +
            "76. В чем разница между реляционными и нереляционными базами данных?\n" +
            "77. Как хранятся соотношения one-to-one, one-to-many и many-to-many в виде таблиц?\n" +
            "78. Что такое нормализация БД? Приведите примеры из реального проекта.\n" +
            "79. Какие есть виды индексов в БД?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсе SQL Базовый.\n" +
            " \n" +
            "Практические задания\n" +
            "80. Valid parentheses (задача с LeetCode).\n" +
            "81. Reverse Linked List (задача с LeetCode).\n" +
            "82. Дано String s, найти длину максимального substring без повтора символов.\n" +
            "83. Определить, является ли односвязный LinkedList палиндромом.\n" +
            " \n" +
            "Senior\n" +
            "Общие\n" +
            "1. Когда лучше использовать наследование, а не агрегацию?\n" +
            "2. Расскажите о принципах работы Kubernetes.\n" +
            " \n" +
            "Java Core\n" +
            "3. В чем разница между Java NIO и Java IO?\n" +
            "4. Чем отличается Lambda от анонимного класса?\n" +
            "5. Расскажите о Java Memory Model.\n" +
            "6. Какие есть типы памяти в JVM?\n" +
            "7. Опишите жизненный цикл Java-объекта. Каким образом объект переходит из одной области памяти Garbage Collector в другую? Что является триггером такого перехода?\n" +
            "8. Каким образом можно заставить JVM запустить Garbage Collector?\n" +
            "9. Какие существуют Garbage Collectors в JVM и зачем их столько?\n" +
            "10. Какие виды Garbage Collector есть в HotSpot? Как работают?\n" +
            "11. Что будет с Garbage Collector, если finalize() будет долго выполняться или в процессе выполнения получим исключение?\n" +
            "12. Чем ForkJoinPool отличается от ScheduledThreadPoolExecutor и ThreadPoolExecutor?\n" +
            "13. Какая разница между HashMap, WeakHashMap, Hashtable, IdentityHashMap?\n" +
            "14. Что такое LinkedHashMap?\n" +
            "15. Что такое EnumSet? Для чего использовать? Как реализовать?\n" +
            "16. Расскажите об особенностях сериализации в Java. Зачем serialVersionUID и InvalidClassException?\n" +
            "17. В чем проблема сериализации Singleton?\n" +
            "18. Какие бывают алгоритмы обхода деревьев и почему они разные?\n" +
            "19. Что такое deadlock? Какие типы существуют? Нарисуйте схематично, как может произойти.\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсе Java Базовый и Java Углублённый.\n" +
            " \n" +
            "Базы данных\n" +
            "20. Что такое ACID?\n" +
            "21. Что означает CAP-теорема?\n" +
            "22. Какие есть уровни изоляции транзакций?\n" +
            "23. Есть ли смысл отказываться от использования ORM?\n" +
            "24. Что такое n+1 проблема?\n" +
            "25. Что такое cartesian product проблема?\n" +
            " \n" +
            "Библиотеки и инструменты\n" +
            "26. Каким образом построить monitoring в Java? Расскажите об особенностях использования Java micrometrics или DropWizard, или Prometheus frameworks.\n" +
            "27. Опишите механизм работы ORM.\n" +
            "28. Какие способы выборки данных в Hibernate вы знаете?\n" +
            "29. Какие изоляции транзакций существуют в Hibernate?\n" +
            " \n" +
            "Spring\n" +
            "30. Что такое IoC и DI?\n" +
            "31. Каков жизненный цикл объектов, которые создает Spring?\n" +
            "32. Какие есть виды контекстов?\n" +
            "33. Как создать и поднять контекст с целью тестирования приложения?\n" +
            "34. Какие возможности Spring предоставляет для коммуникации с базой данных?\n" +
            "35. Какие признаки того, что класс - Java Bean? Чем POJO отличается от Java Bean?\n" +
            "36. Опишите механизм инъекции зависимости в Spring.\n" +
            "37. Почему все зависимости Spring являются Java Beans? Возможно ли использовать Spring для управления зависимостями между не Java Beans классами?\n" +
            "38. Чем Spring singleton отличается от prototype?\n" +
            "39. Есть ли смысл отказываться от использования Dependency Injection?\n" +
            "Ответы на некоторые из этих вопросов вы можете найти в видео курсах Spring, Spring MVC.\n" +
            " \n" +
            "Многопоточность\n" +
            "40. Что такое race-condition?\n" +
            "41. Какие элементы есть в java.util.concurrent пакете?\n" +
            "42. Что такое optimistic и pessimistic locking?\n" +
            "43. Какие особенности многопоточности в Java EE и Spring?\n" +
            " \n" +
            "Stream API\n" +
            "44. Какие основные принципы Stream API?\n" +
            " \n" +
            "Практические задания\n" +
            "45. Реализовать сервис, который на вход принимает url и возвращает короткую версию (вроде bit.ly/86gfr3).";

    class test {
        public test() {
            return;
        }
    }

    // Output:
// Static initializer of Parent
// Static initializer of Child
// Instance initializer of Parent
// Constructor of Parent
// Instance initializer of Child
// Constructor of Child

}